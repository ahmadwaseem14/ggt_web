# Generated by Django 5.0.7 on 2025-03-25 07:00

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the PC case (e.g., MX600 RGB)', max_length=255, unique=True)),
                ('model', models.CharField(help_text='The model of the case (e.g., MX600 RGB White)', max_length=100)),
                ('brand', models.CharField(help_text='The brand of the case (e.g., Cooler Master, Corsair, NZXT)', max_length=100)),
                ('case_type', models.CharField(choices=[('Full Tower', 'Full Tower'), ('Mid Tower', 'Mid Tower'), ('Mini Tower', 'Mini Tower'), ('Small Form Factor (SFF)', 'Small Form Factor (SFF)'), ('Micro-ATX', 'Micro-ATX'), ('Mini-ITX', 'Mini-ITX'), ('Cube Case', 'Cube Case'), ('Open-Air', 'Open-Air'), ('Rackmount', 'Rackmount')], help_text='The form factor of the case', max_length=50)),
                ('supported_motherboards', models.JSONField(default=list, help_text="List of motherboard sizes supported (e.g., ['ATX', 'Micro-ATX', 'Mini-ITX'])")),
                ('width_mm', models.PositiveIntegerField(help_text='Width in mm')),
                ('height_mm', models.PositiveIntegerField(help_text='Height in mm')),
                ('depth_mm', models.PositiveIntegerField(help_text='Depth in mm')),
                ('width_in', models.FloatField(help_text='Width in inches')),
                ('height_in', models.FloatField(help_text='Height in inches')),
                ('depth_in', models.FloatField(help_text='Depth in inches')),
                ('io_ports', models.JSONField(default=list, help_text="List of front-panel I/O ports (e.g., ['USB 3.0', 'USB Type-C', 'Audio Jack', 'RGB Button'])")),
                ('drive_bays_35', models.PositiveIntegerField(default=0, help_text='Number of 3.5-inch drive bays')),
                ('drive_bays_25', models.PositiveIntegerField(default=0, help_text='Number of 2.5-inch drive bays (including converted bays)')),
                ('horizontal_slots', models.PositiveIntegerField(default=0, help_text='Number of horizontal expansion slots')),
                ('vertical_slots', models.PositiveIntegerField(default=0, help_text='Number of vertical expansion slots')),
                ('vertical_gpu_support', models.BooleanField(default=False, help_text='Does the case support vertical GPU mounting?')),
                ('max_fan_mounts', models.PositiveIntegerField(default=0, help_text='Maximum number of fan mounts')),
                ('preinstalled_fans', models.JSONField(default=list, help_text="List of pre-installed fans with details (e.g., [{'location': 'Front', 'size': 140, 'type': 'ARGB'}])")),
                ('fan_speeds', models.JSONField(default=dict, help_text="Dictionary of fan speeds (e.g., {'140mm': '500-1200 RPM', '120mm': '500-1400 RPM'})")),
                ('fan_connectors', models.JSONField(default=list, help_text="List of fan connectors (e.g., ['5V 3 Pin (ARGB)', '4 Pin PWM'])")),
                ('water_cooling_support', models.JSONField(default=dict, help_text="Dictionary of supported radiator sizes by location (e.g., {'Front': ['360mm', '280mm'], 'Top': ['360mm']})")),
                ('has_tempered_glass', models.BooleanField(default=False, help_text='Does the case have a tempered glass side panel?')),
                ('has_rgb_sync', models.BooleanField(default=False, help_text='Does the case support RGB sync with the motherboard?')),
                ('max_gpu_length', models.PositiveIntegerField(help_text='Max GPU length in mm')),
                ('max_cpu_cooler_height', models.PositiveIntegerField(help_text='Max CPU cooler height in mm')),
                ('max_psu_length', models.PositiveIntegerField(help_text='Max PSU length in mm')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the case', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this case a top pick?')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the case', max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'PC Case',
                'verbose_name_plural': 'PC Cases',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full product name (e.g., AMD Ryzen 9 5950X)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('intel', 'Intel'), ('amd', 'AMD'), ('other', 'Other')], help_text='The brand of the CPU (e.g., Intel, AMD)', max_length=20)),
                ('model', models.CharField(help_text='The model of the CPU (e.g., i9-13900K, Ryzen 9 7950X)', max_length=100)),
                ('sku', models.CharField(editable=False, help_text='Automatically generated numeric SKU for the CPU', max_length=20, unique=True)),
                ('socket', models.CharField(choices=[('LGA 775', 'LGA 775'), ('LGA 1156', 'LGA 1156'), ('LGA 1155', 'LGA 1155'), ('LGA 1150', 'LGA 1150'), ('LGA 1151', 'LGA 1151'), ('LGA 1200', 'LGA 1200'), ('LGA 1366', 'LGA 1366'), ('LGA 1567', 'LGA 1567'), ('LGA 1700', 'LGA 1700'), ('LGA 1851', 'LGA 1851'), ('LGA 2011', 'LGA 2011'), ('LGA 2011-3', 'LGA 2011-3'), ('LGA 2066', 'LGA 2066'), ('LGA 3647', 'LGA 3647'), ('LGA 4189', 'LGA 4189'), ('LGA 4677', 'LGA 4677'), ('LGA 771', 'LGA 771'), ('LGA 1356', 'LGA 1356'), ('LGA 2551', 'LGA 2551'), ('AM3', 'AM3'), ('AM3+', 'AM3+'), ('AM4', 'AM4'), ('AM5', 'AM5'), ('FM1', 'FM1'), ('FM2', 'FM2'), ('FM2+', 'FM2+'), ('TR4', 'TR4'), ('sTRX4', 'sTRX4'), ('sWRX8', 'sWRX8'), ('sTR5', 'sTR5'), ('SP3', 'SP3'), ('SP5', 'SP5'), ('SP6', 'SP6'), ('G34', 'G34'), ('C32', 'C32'), ('F (1207)', 'F (1207)'), ('Socket 423', 'Socket 423'), ('Socket 478', 'Socket 478'), ('Socket 754', 'Socket 754'), ('Socket 939', 'Socket 939')], help_text='The CPU socket type (e.g., LGA 1700, AM5)', max_length=20)),
                ('cores', models.PositiveIntegerField(choices=[(1, '1 Core'), (2, '2 Cores'), (4, '4 Cores'), (6, '6 Cores'), (8, '8 Cores'), (10, '10 Cores'), (12, '12 Cores'), (16, '16 Cores'), (24, '24 Cores'), (32, '32 Cores'), (48, '48 Cores'), (64, '64 Cores'), (96, '96 Cores'), (128, '128 Cores')], help_text='Number of CPU cores')),
                ('threads', models.PositiveIntegerField(choices=[(2, '2 Threads'), (4, '4 Threads'), (8, '8 Threads'), (12, '12 Threads'), (16, '16 Threads'), (24, '24 Threads'), (32, '32 Threads'), (48, '48 Threads'), (64, '64 Threads'), (96, '96 Threads'), (128, '128 Threads'), (192, '192 Threads'), (256, '256 Threads')], help_text='Number of CPU threads')),
                ('cache', models.PositiveIntegerField(choices=[(2, '2 MB'), (4, '4 MB'), (6, '6 MB'), (8, '8 MB'), (12, '12 MB'), (16, '16 MB'), (24, '24 MB'), (32, '32 MB'), (64, '64 MB'), (96, '96 MB'), (128, '128 MB')], help_text='L3 Cache size in MB')),
                ('base_clock_speed', models.DecimalField(blank=True, decimal_places=2, help_text='Base clock speed in GHz (e.g., 3.6 GHz)', max_digits=5, null=True)),
                ('boost_clock_speed', models.DecimalField(blank=True, decimal_places=2, help_text='Boost clock speed in GHz (e.g., 5.3 GHz)', max_digits=5, null=True)),
                ('tdp', models.PositiveIntegerField(blank=True, help_text='Thermal Design Power in watts (e.g., 125W)', null=True)),
                ('integrated_graphics', models.CharField(blank=True, help_text='Integrated graphics model (e.g., Intel UHD 770)', max_length=100)),
                ('overclockable', models.BooleanField(default=False, help_text='Is the CPU overclockable?')),
                ('power_connectors', models.JSONField(blank=True, default=list, help_text="A list of power connectors required (e.g., ['8-pin EPS', '4+4-pin EPS'])")),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the CPU (optional)', max_digits=10, null=True)),
                ('cooling_solution', models.CharField(blank=True, help_text='Included cooling solution (e.g., Wraith Prism, None)', max_length=50)),
                ('features', models.TextField(blank=True, help_text='Additional features like PCIe version support, memory compatibility, etc.')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the CPU', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this CPU a top pick?')),
            ],
            options={
                'verbose_name': 'CPU',
                'verbose_name_plural': 'CPUs',
            },
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full product name (e.g., ASUS ROG STRIX GeForce RTX 3080 OC 10GB)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('nvidia', 'NVIDIA'), ('amd', 'AMD'), ('intel', 'Intel'), ('other', 'Other')], help_text='The brand of the GPU (e.g., NVIDIA, AMD)', max_length=20)),
                ('model', models.CharField(help_text='The model of the GPU (e.g., RTX 3080, RX 6800 XT)', max_length=100)),
                ('sku', models.CharField(editable=False, help_text='Automatically generated numeric SKU for the GPU', max_length=20, unique=True)),
                ('vram', models.PositiveIntegerField(choices=[(1, '1 GB'), (2, '2 GB'), (4, '4 GB'), (6, '6 GB'), (8, '8 GB'), (10, '10 GB'), (12, '12 GB'), (16, '16 GB'), (24, '24 GB')], help_text='The amount of VRAM in GB (e.g., 10 GB)')),
                ('memory_type', models.CharField(blank=True, choices=[('gddr3', 'GDDR3'), ('gddr4', 'GDDR4'), ('gddr5', 'GDDR5'), ('gddr5x', 'GDDR5X'), ('gddr6', 'GDDR6'), ('gddr6x', 'GDDR6X'), ('hbm1', 'HBM1'), ('hbm2', 'HBM2'), ('hbm2e', 'HBM2e'), ('hbm3', 'HBM3')], help_text='The type of memory (e.g., GDDR6, GDDR6X)', max_length=20)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the GPU', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this GPU a top pick?')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the GPU (optional)', max_digits=10, null=True)),
                ('interface', models.CharField(blank=True, help_text='The interface type (e.g., PCIe 4.0 x16)', max_length=50)),
                ('clock_speed', models.PositiveIntegerField(blank=True, help_text='The base clock speed in MHz (e.g., 1440)', null=True)),
                ('boost_clock_speed', models.PositiveIntegerField(blank=True, help_text='The boost clock speed in MHz (e.g., 1710)', null=True)),
                ('cuda_cores', models.PositiveIntegerField(blank=True, help_text='The number of CUDA cores (for NVIDIA GPUs)', null=True)),
                ('stream_processors', models.PositiveIntegerField(blank=True, help_text='The number of stream processors (for AMD GPUs)', null=True)),
                ('length', models.DecimalField(blank=True, decimal_places=2, help_text='The length of the GPU in millimeters (e.g., 285.37)', max_digits=5, null=True)),
                ('tdp', models.PositiveIntegerField(blank=True, help_text='The Thermal Design Power in watts (e.g., 320)', null=True)),
                ('recommended_psu', models.PositiveIntegerField(blank=True, help_text='The recommended minimum power supply in watts (e.g., 750)', null=True)),
                ('directx_support', models.CharField(blank=True, help_text='The DirectX version supported (e.g., DirectX 12 Ultimate)', max_length=50)),
                ('opengl_support', models.CharField(blank=True, help_text='The OpenGL version supported (e.g., OpenGL 4.6)', max_length=50)),
                ('ray_tracing_support', models.BooleanField(default=False, help_text='Does the GPU support ray tracing?')),
                ('dlss_support', models.BooleanField(default=False, help_text='Does the GPU support DLSS?')),
                ('ports', models.JSONField(blank=True, default=list, help_text="A list of ports (e.g., ['HDMI 2.1', 'DisplayPort 1.4a', 'USB-C'])")),
                ('multi_gpu_support', models.CharField(blank=True, help_text='The type of multi-GPU support (e.g., SLI, NVLink, CrossFire)', max_length=50)),
                ('power_connectors', models.JSONField(blank=True, default=list, help_text="A list of power connectors (e.g., ['2x 8-pin', '12VHPWR'])")),
                ('cooling_system', models.CharField(blank=True, choices=[('dual_fan', 'Dual Fan'), ('triple_fan', 'Triple Fan'), ('liquid_cooling', 'Liquid Cooling'), ('blower', 'Blower')], help_text='The type of cooling system (e.g., Dual Fan, Liquid Cooling)', max_length=50)),
                ('description', models.TextField(blank=True, help_text='A detailed description of the GPU')),
            ],
            options={
                'verbose_name': 'GPU',
                'verbose_name_plural': 'GPUs',
            },
        ),
        migrations.CreateModel(
            name='Headset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the headset (e.g., HyperX Cloud II Wireless Gaming Headset)', max_length=255, unique=True)),
                ('brand', models.CharField(help_text='Enter the brand (e.g., HyperX, SteelSeries)', max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('connection_type', models.CharField(choices=[('Wired', 'Wired'), ('Wireless', 'Wireless')], max_length=10)),
                ('has_microphone', models.BooleanField(default=True, help_text='Has a microphone?')),
                ('surround_sound', models.BooleanField(default=False, help_text='Virtual Surround Sound?')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the headset', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this headset a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the headset', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Keyboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the keyboard (e.g., Corsair K70 RGB MK.2 Mechanical Gaming Keyboard)', max_length=255, unique=True)),
                ('brand', models.CharField(help_text='Enter the brand (e.g., Corsair, ASUS)', max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('connection_type', models.CharField(choices=[('Wired', 'Wired'), ('Wireless', 'Wireless')], max_length=10)),
                ('keyboard_type', models.CharField(choices=[('Mechanical', 'Mechanical'), ('Membrane', 'Membrane')], max_length=20)),
                ('has_rgb', models.BooleanField(default=False, help_text='RGB lighting?')),
                ('num_keys', models.PositiveIntegerField(help_text='Total keys count')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the keyboard', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this keyboard a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the keyboard', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Laptop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full product name (e.g., MacBook Pro 16-inch 2023)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('Dell', 'Dell'), ('HP', 'HP'), ('Lenovo', 'Lenovo'), ('ASUS', 'ASUS'), ('Acer', 'Acer'), ('MSI', 'MSI'), ('Apple', 'Apple'), ('Razer', 'Razer'), ('Samsung', 'Samsung'), ('Microsoft', 'Microsoft'), ('Gigabyte', 'Gigabyte'), ('Huawei', 'Huawei')], max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('processor_brand', models.CharField(choices=[('Intel', 'Intel'), ('AMD', 'AMD'), ('Apple', 'Apple'), ('Qualcomm', 'Qualcomm')], max_length=50)),
                ('processor_model', models.CharField(max_length=100)),
                ('processor_generation', models.CharField(max_length=50)),
                ('core_count', models.PositiveIntegerField()),
                ('base_clock', models.FloatField(default=0, help_text='Base clock speed in GHz')),
                ('boost_clock', models.FloatField(default=0, help_text='Boost clock speed in GHz')),
                ('ram_capacity', models.PositiveIntegerField(choices=[(4, '4GB'), (8, '8GB'), (16, '16GB'), (32, '32GB'), (64, '64GB'), (128, '128GB')])),
                ('ram_type', models.CharField(choices=[('DDR3', 'DDR3'), ('DDR4', 'DDR4'), ('DDR5', 'DDR5'), ('LPDDR4', 'LPDDR4'), ('LPDDR4X', 'LPDDR4X'), ('LPDDR5', 'LPDDR5')], max_length=20)),
                ('ram_speed', models.PositiveIntegerField(help_text='RAM speed in MHz')),
                ('storage_type', models.CharField(choices=[('HDD', 'HDD'), ('SSD', 'SSD'), ('NVMe SSD', 'NVMe SSD')], max_length=20)),
                ('storage_capacity', models.PositiveIntegerField(choices=[(256, '256GB'), (512, '512GB'), (1024, '1TB'), (2048, '2TB'), (4096, '4TB')])),
                ('screen_size', models.FloatField(help_text='Screen size in inches')),
                ('resolution', models.CharField(choices=[('1366x768', 'HD (1366x768)'), ('1920x1080', 'Full HD (1920x1080)'), ('2560x1440', 'QHD (2560x1440)'), ('3840x2160', '4K UHD (3840x2160)'), ('3456x2234', '3.5K (3456x2234)')], max_length=50)),
                ('refresh_rate', models.PositiveIntegerField(choices=[(60, '60Hz'), (90, '90Hz'), (120, '120Hz'), (144, '144Hz'), (165, '165Hz'), (240, '240Hz')])),
                ('display_type', models.CharField(choices=[('IPS', 'IPS'), ('OLED', 'OLED'), ('Mini LED', 'Mini LED'), ('TN', 'TN'), ('VA', 'VA')], max_length=50)),
                ('brightness', models.PositiveIntegerField(help_text='Brightness in nits')),
                ('touch_screen', models.BooleanField(default=False)),
                ('gpu_brand', models.CharField(choices=[('NVIDIA', 'NVIDIA'), ('AMD', 'AMD'), ('Intel', 'Intel'), ('Apple', 'Apple')], max_length=50)),
                ('gpu_model', models.CharField(max_length=100)),
                ('gpu_memory', models.PositiveIntegerField(help_text='GPU memory in GB')),
                ('battery_capacity', models.PositiveIntegerField(help_text='Battery capacity in Whr')),
                ('battery_life', models.CharField(max_length=50)),
                ('power_adapter', models.PositiveIntegerField(help_text='Power adapter wattage')),
                ('fast_charging', models.BooleanField(default=False)),
                ('wifi_standard', models.CharField(choices=[('Wi-Fi 5', 'Wi-Fi 5 (802.11ac)'), ('Wi-Fi 6', 'Wi-Fi 6 (802.11ax)'), ('Wi-Fi 6E', 'Wi-Fi 6E')], max_length=20)),
                ('bluetooth_version', models.CharField(choices=[('4.0', 'Bluetooth 4.0'), ('5.0', 'Bluetooth 5.0'), ('5.1', 'Bluetooth 5.1'), ('5.2', 'Bluetooth 5.2')], max_length=20)),
                ('usb_ports', models.JSONField(help_text='List of USB ports and their types')),
                ('hdmi_ports', models.PositiveIntegerField(default=1)),
                ('ethernet_port', models.BooleanField(default=False)),
                ('headphone_jack', models.BooleanField(default=True)),
                ('card_reader', models.BooleanField(default=False)),
                ('weight', models.FloatField(help_text='Weight in kg')),
                ('dimensions', models.CharField(help_text='WxDxH in mm', max_length=50)),
                ('build_material', models.CharField(choices=[('Aluminum', 'Aluminum'), ('Plastic', 'Plastic'), ('Magnesium', 'Magnesium'), ('Carbon Fiber', 'Carbon Fiber')], max_length=100)),
                ('color', models.CharField(choices=[('Black', 'Black'), ('Silver', 'Silver'), ('Space Gray', 'Space Gray'), ('White', 'White'), ('Blue', 'Blue'), ('Red', 'Red')], max_length=50)),
                ('backlit_keyboard', models.BooleanField(default=False)),
                ('fingerprint_sensor', models.BooleanField(default=False)),
                ('face_recognition', models.BooleanField(default=False)),
                ('numeric_keypad', models.BooleanField(default=False)),
                ('webcam_resolution', models.CharField(choices=[('720p', 'HD (720p)'), ('1080p', 'Full HD (1080p)'), ('1440p', 'QHD (1440p)')], max_length=20)),
                ('speakers', models.CharField(max_length=100)),
                ('microphone', models.CharField(max_length=100)),
                ('operating_system', models.CharField(choices=[('Windows 10', 'Windows 10'), ('Windows 11', 'Windows 11'), ('macOS', 'macOS'), ('Linux', 'Linux'), ('ChromeOS', 'ChromeOS')], max_length=50)),
                ('os_version', models.CharField(max_length=50)),
                ('warranty_info', models.TextField()),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], max_length=20)),
                ('top_pick', models.BooleanField(default=False)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
            ],
            options={
                'verbose_name': 'Laptop',
                'verbose_name_plural': 'Laptops',
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the monitor (e.g., ASUS ROG Swift PG279QM 27" 1440p 240Hz)', max_length=255, unique=True)),
                ('brand', models.CharField(help_text='Enter monitor brand (e.g., Dell, ASUS, LG)', max_length=50)),
                ('model_name', models.CharField(help_text='Enter model name (e.g., ROG Swift PG259QN)', max_length=100)),
                ('screen_size', models.DecimalField(decimal_places=1, help_text='Size in inches (e.g., 27.0)', max_digits=4)),
                ('panel_type', models.CharField(choices=[('IPS', 'IPS'), ('VA', 'VA'), ('TN', 'TN'), ('OLED', 'OLED'), ('Mini LED', 'Mini LED')], max_length=20)),
                ('refresh_rate', models.PositiveIntegerField(choices=[(60, '60Hz'), (75, '75Hz'), (120, '120Hz'), (144, '144Hz'), (165, '165Hz'), (240, '240Hz'), (360, '360Hz')])),
                ('resolution', models.CharField(choices=[('1920x1080', '1080p (1920x1080)'), ('2560x1440', '1440p (2560x1440)'), ('3840x2160', '4K (3840x2160)'), ('5120x2160', '5K (5120x2160)'), ('7680x4320', '8K (7680x4320)')], max_length=20)),
                ('aspect_ratio', models.CharField(choices=[('16:9', '16:9 (Standard)'), ('21:9', '21:9 (Ultrawide)'), ('32:9', '32:9 (Super Ultrawide)')], max_length=10)),
                ('has_hdmi', models.BooleanField(default=True, help_text='Does it have HDMI?')),
                ('has_displayport', models.BooleanField(default=True, help_text='Does it have DisplayPort?')),
                ('has_usb_c', models.BooleanField(default=False, help_text='Does it have USB-C?')),
                ('has_vga', models.BooleanField(default=False, help_text='Does it have VGA?')),
                ('supports_gsync', models.BooleanField(default=False, help_text='Supports NVIDIA G-Sync?')),
                ('supports_freesync', models.BooleanField(default=False, help_text='Supports AMD FreeSync?')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the monitor', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this monitor a top pick?')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the monitor', max_digits=10, null=True)),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
            ],
            options={
                'verbose_name': 'Monitor',
                'verbose_name_plural': 'Monitors',
            },
        ),
        migrations.CreateModel(
            name='Motherboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the motherboard (e.g., ASUS ROG STRIX Z690-E)', max_length=255, unique=True)),
                ('model', models.CharField(help_text='The model of the motherboard (e.g., ROG STRIX Z690-E)', max_length=100)),
                ('brand', models.CharField(choices=[('asus', 'ASUS'), ('msi', 'MSI'), ('gigabyte', 'Gigabyte'), ('asrock', 'ASRock'), ('biostar', 'Biostar'), ('evga', 'EVGA'), ('nzxt', 'NZXT'), ('supermicro', 'Supermicro'), ('intel_oem', 'Intel (OEM boards)'), ('tyan', 'Tyan'), ('supermicro', 'Supermicro'), ('dell', 'Dell'), ('hp', 'HP'), ('lenovo', 'Lenovo'), ('acer', 'Acer')], help_text='The brand of the motherboard', max_length=20)),
                ('socket', models.CharField(choices=[('LGA 775', 'LGA 775'), ('LGA 1156', 'LGA 1156'), ('LGA 1155', 'LGA 1155'), ('LGA 1150', 'LGA 1150'), ('LGA 1151', 'LGA 1151'), ('LGA 1200', 'LGA 1200'), ('LGA 1366', 'LGA 1366'), ('LGA 1567', 'LGA 1567'), ('LGA 1700', 'LGA 1700'), ('LGA 1851', 'LGA 1851'), ('LGA 2011', 'LGA 2011'), ('LGA 2011-3', 'LGA 2011-3'), ('LGA 2066', 'LGA 2066'), ('LGA 3647', 'LGA 3647'), ('LGA 4189', 'LGA 4189'), ('LGA 4677', 'LGA 4677'), ('LGA 771', 'LGA 771'), ('LGA 1356', 'LGA 1356'), ('LGA 2551', 'LGA 2551'), ('AM3', 'AM3'), ('AM3+', 'AM3+'), ('AM4', 'AM4'), ('AM5', 'AM5'), ('FM1', 'FM1'), ('FM2', 'FM2'), ('FM2+', 'FM2+'), ('TR4', 'TR4'), ('sTRX4', 'sTRX4'), ('sWRX8', 'sWRX8'), ('sTR5', 'sTR5'), ('SP3', 'SP3'), ('SP5', 'SP5'), ('SP6', 'SP6'), ('G34', 'G34'), ('C32', 'C32'), ('F (1207)', 'F (1207)'), ('Socket 423', 'Socket 423'), ('Socket 478', 'Socket 478'), ('Socket 754', 'Socket 754'), ('Socket 939', 'Socket 939')], help_text='Compatible CPU socket type', max_length=20)),
                ('chipset', models.CharField(help_text='Chipset (e.g., Z690, B550, X570, H610)', max_length=100)),
                ('form_factor', models.CharField(choices=[('ATX', 'ATX'), ('Micro-ATX', 'Micro-ATX'), ('Mini-ITX', 'Mini-ITX'), ('E-ATX', 'E-ATX'), ('XL-ATX', 'XL-ATX'), ('SSI-CEB', 'SSI-CEB'), ('SSI-EEB', 'SSI-EEB')], help_text='Motherboard form factor', max_length=20)),
                ('ram_type', models.CharField(choices=[('DDR', 'DDR'), ('DDR2', 'DDR2'), ('DDR3', 'DDR3'), ('DDR3L', 'DDR3L'), ('DDR4', 'DDR4'), ('DDR5', 'DDR5')], help_text='Supported RAM type', max_length=10)),
                ('ram_slots', models.PositiveIntegerField(default=2, help_text='Number of RAM slots')),
                ('max_ram', models.PositiveIntegerField(help_text='Maximum RAM capacity in GB')),
                ('pcie_version', models.CharField(choices=[('PCIe 3.0', 'PCIe 3.0'), ('PCIe 4.0', 'PCIe 4.0'), ('PCIe 5.0', 'PCIe 5.0')], help_text='PCIe version supported', max_length=10)),
                ('pcie_slots', models.PositiveIntegerField(help_text='Number of PCIe slots')),
                ('sata_ports', models.PositiveIntegerField(help_text='Number of SATA ports')),
                ('m2_slots', models.PositiveIntegerField(help_text='Number of M.2 slots')),
                ('usb_ports', models.JSONField(blank=True, default=list, help_text="List of available USB ports (e.g., ['USB 3.2 Gen2', 'USB Type-C', 'USB 2.0'])")),
                ('has_wifi', models.BooleanField(default=False, help_text='Does the motherboard have built-in WiFi?')),
                ('ethernet_speed', models.CharField(blank=True, help_text='Ethernet speed (e.g., 1GbE, 2.5GbE, 10GbE)', max_length=50)),
                ('has_rgb', models.BooleanField(default=False, help_text='Does the motherboard have RGB lighting?')),
                ('power_connectors', models.JSONField(blank=True, default=list, help_text="A list of power connectors (e.g., ['24-pin ATX', '8-pin EPS', '4+4-pin EPS'])")),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the motherboard', max_digits=10, null=True)),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the motherboard', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this motherboard a top pick?')),
            ],
            options={
                'verbose_name': 'Motherboard',
                'verbose_name_plural': 'Motherboards',
            },
        ),
        migrations.CreateModel(
            name='Mouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the mouse (e.g., Logitech G Pro X Superlight Wireless)', max_length=255, unique=True)),
                ('brand', models.CharField(help_text='Enter the brand (e.g., Logitech, Razer)', max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('connection_type', models.CharField(choices=[('Wired', 'Wired'), ('Wireless', 'Wireless')], max_length=10)),
                ('dpi', models.PositiveIntegerField(help_text='Max DPI (e.g., 16000)')),
                ('buttons', models.PositiveIntegerField(help_text='Number of buttons')),
                ('has_rgb', models.BooleanField(default=False, help_text='RGB lighting?')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the mouse', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this mouse a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the mouse', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OtherAccessory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the accessory (e.g., NZXT Kraken Z73 360mm AIO Liquid Cooler)', max_length=255, unique=True)),
                ('brand', models.CharField(help_text='Enter the brand (e.g., Generic, Lenovo)', max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('category', models.CharField(help_text='Category (e.g., Cooling Pad, USB Hub)', max_length=100)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the accessory', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this accessory a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the accessory', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PSU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the PSU (e.g., Corsair RM850x 850W 80+ Gold)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('Corsair', 'Corsair'), ('EVGA', 'EVGA'), ('Seasonic', 'Seasonic'), ('Thermaltake', 'Thermaltake'), ('Cooler Master', 'Cooler Master'), ('Be Quiet!', 'Be Quiet!'), ('SilverStone', 'SilverStone'), ('NZXT', 'NZXT'), ('Gigabyte', 'Gigabyte'), ('Deepcool', 'Deepcool'), ('ASUS', 'ASUS'), ('MSI', 'MSI')], max_length=50)),
                ('model_name', models.CharField(help_text='e.g., RM850x, SF600, Focus GX-750', max_length=100)),
                ('wattage', models.PositiveIntegerField(choices=[(450, '450W'), (550, '550W'), (650, '650W'), (750, '750W'), (850, '850W'), (1000, '1000W'), (1200, '1200W'), (1500, '1500W'), (1600, '1600W')])),
                ('efficiency_rating', models.CharField(choices=[('80+ Bronze', '80+ Bronze'), ('80+ Silver', '80+ Silver'), ('80+ Gold', '80+ Gold'), ('80+ Platinum', '80+ Platinum'), ('80+ Titanium', '80+ Titanium')], max_length=20)),
                ('modular_type', models.CharField(choices=[('Non-Modular', 'Non-Modular'), ('Semi-Modular', 'Semi-Modular'), ('Fully Modular', 'Fully Modular')], max_length=20)),
                ('form_factor', models.CharField(choices=[('ATX', 'ATX'), ('SFX', 'SFX'), ('SFX-L', 'SFX-L'), ('TFX', 'TFX')], max_length=10)),
                ('pci_e_connectors', models.PositiveIntegerField(help_text='Number of PCIe (6+2) connectors')),
                ('cpu_power_connectors', models.PositiveIntegerField(help_text='Number of CPU (4+4) connectors')),
                ('sata_connectors', models.PositiveIntegerField(help_text='Number of SATA connectors')),
                ('molex_connectors', models.PositiveIntegerField(help_text='Number of Molex connectors')),
                ('has_ocp', models.BooleanField(default=True, help_text='Over Current Protection (OCP)')),
                ('has_ovp', models.BooleanField(default=True, help_text='Over Voltage Protection (OVP)')),
                ('has_uvp', models.BooleanField(default=True, help_text='Under Voltage Protection (UVP)')),
                ('has_scp', models.BooleanField(default=True, help_text='Short Circuit Protection (SCP)')),
                ('has_opp', models.BooleanField(default=True, help_text='Over Power Protection (OPP)')),
                ('has_otp', models.BooleanField(default=True, help_text='Over Temperature Protection (OTP)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the PSU', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this PSU a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the PSU', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full product name (e.g., Corsair Vengeance RGB Pro 32GB DDR4-3600)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('Corsair', 'Corsair'), ('G.Skill', 'G.Skill'), ('Kingston', 'Kingston'), ('Crucial', 'Crucial'), ('Samsung', 'Samsung'), ('ADATA', 'ADATA'), ('HyperX', 'HyperX'), ('TeamGroup', 'TeamGroup'), ('Patriot', 'Patriot'), ('T-Force', 'T-Force')], max_length=50)),
                ('model_name', models.CharField(help_text='e.g., Vengeance LPX, Ripjaws V, Ballistix Elite', max_length=100)),
                ('ram_type', models.CharField(choices=[('DDR2', 'DDR2'), ('DDR3', 'DDR3'), ('DDR3L', 'DDR3L'), ('DDR4', 'DDR4'), ('DDR5', 'DDR5')], max_length=10)),
                ('capacity', models.PositiveIntegerField(choices=[(2, '2GB'), (4, '4GB'), (8, '8GB'), (16, '16GB'), (32, '32GB'), (64, '64GB'), (128, '128GB'), (256, '256GB')], help_text='Select RAM Size (GB)')),
                ('speed', models.PositiveIntegerField(help_text='Speed in MHz (e.g., 2400, 3200, 3600)')),
                ('form_factor', models.CharField(choices=[('DIMM', 'DIMM (Desktop)'), ('SODIMM', 'SODIMM (Laptop)')], max_length=10)),
                ('voltage', models.DecimalField(decimal_places=2, default=1.2, help_text='Voltage (e.g., 1.2V, 1.35V)', max_digits=3)),
                ('ecc_support', models.BooleanField(default=False, help_text='Is ECC (Error-Correcting Code) supported?')),
                ('rgb_lighting', models.BooleanField(default=False, help_text='Does it have RGB lighting?')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the RAM (e.g., New, Used, Refurbished, Box Open)', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period (e.g., 1 Year, 2 Years)', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this RAM a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the RAM', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Speakers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the speakers (e.g., Logitech Z623 2.1 Speaker System)', max_length=255, unique=True)),
                ('brand', models.CharField(help_text='Enter the brand (e.g., Bose, JBL)', max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('connection_type', models.CharField(choices=[('Wired', 'Wired'), ('Bluetooth', 'Bluetooth')], max_length=10)),
                ('wattage', models.PositiveIntegerField(help_text='Total Wattage (e.g., 50W)')),
                ('has_subwoofer', models.BooleanField(default=False, help_text='Has a subwoofer?')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the speakers', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this speaker set a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the speakers', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StorageDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The full name of the storage device (e.g., Samsung 970 EVO Plus 1TB NVMe SSD)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('Seagate', 'Seagate'), ('Western Digital', 'Western Digital'), ('Samsung', 'Samsung'), ('Kingston', 'Kingston'), ('Crucial', 'Crucial'), ('ADATA', 'ADATA'), ('Toshiba', 'Toshiba'), ('Intel', 'Intel'), ('SK Hynix', 'SK Hynix'), ('TeamGroup', 'TeamGroup')], max_length=50)),
                ('model_name', models.CharField(help_text='e.g., Barracuda, 970 EVO, WD Black', max_length=100)),
                ('storage_type', models.CharField(choices=[('HDD', 'HDD (Hard Disk Drive)'), ('SSD', 'SSD (Solid State Drive)'), ('NVMe', 'NVMe SSD (PCIe)')], max_length=10)),
                ('capacity', models.PositiveIntegerField(choices=[(128, '128GB'), (256, '256GB'), (512, '512GB'), (1024, '1TB'), (2048, '2TB'), (4096, '4TB'), (8192, '8TB'), (12288, '12TB'), (16000, '16TB')], help_text='Select Storage Capacity (GB)')),
                ('interface', models.CharField(choices=[('SATA', 'SATA'), ('PCIe Gen3', 'PCIe Gen3'), ('PCIe Gen4', 'PCIe Gen4'), ('PCIe Gen5', 'PCIe Gen5')], max_length=20)),
                ('form_factor', models.CharField(choices=[('2.5"', '2.5-inch'), ('3.5"', '3.5-inch'), ('M.2', 'M.2'), ('U.2', 'U.2')], max_length=10)),
                ('cache_size', models.PositiveIntegerField(blank=True, help_text='Cache size in MB (for HDDs)', null=True)),
                ('rpm_speed', models.PositiveIntegerField(blank=True, help_text='RPM speed (for HDDs)', null=True)),
                ('read_speed', models.PositiveIntegerField(blank=True, help_text='Read speed in MB/s (for SSDs)', null=True)),
                ('write_speed', models.PositiveIntegerField(blank=True, help_text='Write speed in MB/s (for SSDs)', null=True)),
                ('tbw', models.PositiveIntegerField(blank=True, help_text='Total Bytes Written (TBW) for SSD endurance', null=True)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the storage device', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this storage device a top pick?')),
                ('sku', models.CharField(editable=False, max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the storage device', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_subscribed', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Tablet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full product name (e.g., Apple iPad Pro 12.9-inch 2023)', max_length=255, unique=True)),
                ('brand', models.CharField(choices=[('Apple', 'Apple'), ('Samsung', 'Samsung'), ('Lenovo', 'Lenovo'), ('Huawei', 'Huawei'), ('Microsoft', 'Microsoft'), ('Google', 'Google'), ('Xiaomi', 'Xiaomi'), ('Realme', 'Realme'), ('Amazon', 'Amazon (Fire Tablets)'), ('Asus', 'Asus'), ('Sony', 'Sony'), ('Docomo', 'Docomo'), ('Alcatel', 'Alcatel'), ('Honor', 'Honor')], help_text='Select tablet brand', max_length=50)),
                ('model', models.CharField(help_text='Tablet model number (e.g., A2764, SM-T970, etc.)', max_length=100)),
                ('screen_size', models.FloatField(help_text='Screen size in inches (e.g., 12.9, 10.5)')),
                ('screen_type', models.CharField(help_text='Screen type (e.g., IPS LCD, AMOLED, Retina)', max_length=50)),
                ('resolution', models.CharField(help_text='Resolution (e.g., 2732 x 2048)', max_length=50)),
                ('refresh_rate', models.PositiveIntegerField(default=60, help_text='Refresh rate in Hz (e.g., 60, 90, 120, 144)')),
                ('chipset', models.CharField(help_text='Processor model (e.g., Apple M2, Snapdragon 8 Gen 1)', max_length=100)),
                ('ram', models.PositiveIntegerField(choices=[(2, '2GB'), (3, '3GB'), (4, '4GB'), (6, '6GB'), (8, '8GB'), (12, '12GB'), (16, '16GB')], help_text='Select RAM size')),
                ('storage', models.PositiveIntegerField(choices=[(32, '32GB'), (64, '64GB'), (128, '128GB'), (256, '256GB'), (512, '512GB'), (1024, '1TB'), (2048, '2TB')], help_text='Select internal storage (ROM) size')),
                ('battery_capacity', models.PositiveIntegerField(help_text='Battery capacity in mAh')),
                ('fast_charging', models.BooleanField(default=False, help_text='Supports fast charging?')),
                ('wireless_charging', models.BooleanField(default=False, help_text='Supports wireless charging?')),
                ('charging_wattage', models.PositiveIntegerField(default=10, help_text='Charging power (e.g., 10W, 18W, 45W)')),
                ('rear_camera_mp', models.PositiveIntegerField(help_text='Rear camera resolution in MP (e.g., 12, 48)')),
                ('front_camera_mp', models.PositiveIntegerField(help_text='Front camera resolution in MP (e.g., 7, 12)')),
                ('pta_approved', models.BooleanField(default=False, help_text='PTA Approved for Pakistan?')),
                ('cellular', models.BooleanField(default=False, help_text='Supports SIM card?')),
                ('sim_type', models.CharField(blank=True, help_text='SIM type (e.g., Nano-SIM, eSIM)', max_length=50, null=True)),
                ('usb_type', models.CharField(help_text='USB type (e.g., USB-C, Lightning, Micro-USB)', max_length=20)),
                ('headphone_jack', models.BooleanField(default=False, help_text='Has 3.5mm headphone jack?')),
                ('sd_card_slot', models.BooleanField(default=False, help_text='Supports microSD card expansion?')),
                ('os', models.CharField(help_text='Operating System (e.g., iPadOS, Android 13, Windows 11)', max_length=100)),
                ('os_version', models.CharField(help_text='OS version at launch', max_length=50)),
                ('weight', models.FloatField(help_text='Weight in grams')),
                ('dimensions', models.CharField(help_text='Dimensions (WxHxD) in mm (e.g., 247.6 x 178.5 x 5.9 mm)', max_length=100)),
                ('material', models.CharField(help_text='Build material (e.g., Aluminum, Glass, Plastic)', max_length=50)),
                ('stylus_support', models.BooleanField(default=False, help_text='Supports stylus?')),
                ('keyboard_support', models.BooleanField(default=False, help_text='Supports external keyboards?')),
                ('biometric_auth', models.CharField(help_text='Biometric authentication (e.g., Face ID, Fingerprint)', max_length=50)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('box_open', 'Box Open')], help_text='The condition of the tablet', max_length=20)),
                ('warranty', models.CharField(blank=True, choices=[('no_warranty', 'No Warranty'), ('1_day', '1 Day'), ('3_days', '3 Days'), ('1_week', '1 Week'), ('1_month', '1 Month'), ('6_months', '6 Months'), ('1_year', '1 Year'), ('2_years', '2 Years'), ('3_years', '3 Years')], help_text='The warranty period', max_length=20)),
                ('top_pick', models.BooleanField(default=False, help_text='Is this tablet a top pick?')),
                ('sku', models.CharField(editable=False, help_text='Automatically generated SKU', max_length=20, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the tablet', max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'Tablet',
                'verbose_name_plural': 'Tablets',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Product image (required)', upload_to='product_images/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp'])])),
                ('alt_text', models.CharField(help_text='Alternative text for the image', max_length=100)),
                ('is_primary', models.BooleanField(default=False, help_text='Set as primary image?')),
                ('object_id', models.PositiveIntegerField()),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'ordering': ['-is_primary', '-uploaded_at'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='store_produ_content_13e06a_idx')],
            },
        ),
    ]
